import asyncio
import logging

from aiogram import Bot, Dispatcher, types, html, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from datetime import datetime

from config_reader import config

from utils.keyboards import *
from utils.db import *

logging.basicConfig(level=logging.INFO)

dp = Dispatcher()
dp["started_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")

bot = Bot(token=config.bot_token.get_secret_value(), 
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML
            )
        )


class Contact(StatesGroup):
    wait_for_contact = State()


@dp.message(F.text, Command('start'))
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    global username
    username = message.from_user.username

    current_time = datetime.now().time()

    if (current_time >= datetime.strptime('5:00', '%H:%M').time()) and (current_time < datetime.strptime('12:00', '%H:%M').time()):
        greeting = f'–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É'
    elif (current_time >= datetime.strptime('12:00', '%H:%M').time()) and (current_time < datetime.strptime('18:00', '%H:%M').time()):
        greeting = f'–î–æ–±—Ä–∏–¥–µ–Ω—å'
    elif (current_time >= datetime.strptime('18:00', '%H:%M').time()) and (current_time <= datetime.strptime('23:59', '%H:%M').time()):
        greeting = f'–î–æ–±—Ä–∏–π –≤–µ—á—ñ—Ä'
    elif (current_time >= datetime.strptime('00:00', '%H:%M').time()) and (current_time < datetime.strptime('05:00', '%H:%M').time()):
        greeting = f'–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ'
    else:
        greeting = f'–ü—Ä–∏–≤—ñ—Ç'

    msg=f'{greeting}! –î–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º –≤–∞–º —Ç—Ä–µ–±–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è.\n–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü–û–î–Ü–õ–ò–¢–ò–°–¨"'

    await message.answer(msg, reply_markup=contact_btn())
    await state.set_state(Contact.wait_for_contact)

# if ifBanned == 1:
#         return
    
#     else:

@dp.message(Contact.wait_for_contact)
async def contact(message: types.Message, state: FSMContext): 
    if not message.contact:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å¬ª.")
        return

    phone_number = message.contact.phone_number
    first_name = message.contact.first_name
    user_id = message.from_user.id

    if (first_name == None) or (first_name == "·Ö†"):
        first_name = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"

    starts_with_plus = phone_number.startswith('+')

    if not starts_with_plus:
        phone_number = '+' + phone_number

    add_user(user_id, first_name, username, phone_number)

    first_name = get_first_name(user_id)[0][0]

    msg = f"–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é <b>{first_name}</b>!" 
    await message.answer(msg, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


@dp.message(F.text, Command("order"))
async def order(message: types.Message):
    user_id = message.from_user.id
    username = get_first_name(user_id)[0][0]
    name = get_name(user_id)[0][0]

    ifBanned = is_user_BANNED(user_id)[0][0]

    if ifBanned == 1:
        return

    else:
        activity = is_user_active(user_id)[0][0]

        if activity == 0:
            if name:
                username = name
            else:
                username = username

            current_time = datetime.now().time()

            if (current_time >= datetime.strptime('5:00', '%H:%M').time()) and (current_time < datetime.strptime('12:00', '%H:%M').time()):
                greeting = f'–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É'
            elif (current_time >= datetime.strptime('12:00', '%H:%M').time()) and (current_time < datetime.strptime('18:00', '%H:%M').time()):
                greeting = f'–î–æ–±—Ä–∏–¥–µ–Ω—å'
            elif (current_time >= datetime.strptime('18:00', '%H:%M').time()) and (current_time <= datetime.strptime('23:59', '%H:%M').time()):
                greeting = f'–î–æ–±—Ä–∏–π –≤–µ—á—ñ—Ä'
            elif (current_time >= datetime.strptime('00:00', '%H:%M').time()) and (current_time < datetime.strptime('05:00', '%H:%M').time()):
                greeting = f'–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ'
            else:
                greeting = f'–ü—Ä–∏–≤—ñ—Ç'

            global ask_ord
            ask_ord = f'{greeting}, <a href="tg://user?id={user_id}">{username}</a>! ‚òÄÔ∏è\n–ß–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?'

            await message.answer(ask_ord, reply_markup=get_button())

        else:
            msg = "üõë–í–∏ –≤–∂–µ –∑–¥—ñ–π—Å–Ω—é—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ, –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üõë"
            await message.answer(msg)
            return


@dp.message(F.text, Command("stop"))
async def stop(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    activity = is_user_active(user_id)[0][0]

    ifBanned = is_user_BANNED(user_id)[0][0]

    if ifBanned == 1:
        return

    else:
        if activity == 1:
            set_user_inactive(user_id)
            msg = "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø –∑–∞–≤–∂–¥–∏ —Ç—É—Ç, —è–∫—â–æ –≤–∏ –∑–∞–±–∞–∂–∞—î—Ç–µ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! ‚úÖ"
            await state.clear()
        else:
            msg = "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —â–æ–± –π–æ–≥–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå"
        await message.answer(msg)

# ===================================================================================================
# ====================================== Yes & No btn handlers ======================================
# ===================================================================================================

class Waits(StatesGroup):
    wait_for_name = State()
    wait_for_order = State()
    wait_for_reason = State()


@dp.callback_query(F.data == "YesBtn")
async def YesBtn(call: types.CallbackQuery, state: FSMContext):
    global user_id
    user_id = call.from_user.id
    
    ifBanned = is_user_BANNED(user_id)[0][0]

    if ifBanned == 1:
        return

    else:
        activity = is_user_active(user_id)[0][0]

        if activity == 0:
            set_user_active(user_id)

            await call.message.edit_text(text=ask_ord, reply_markup=None)

            check_name = get_name(user_id)[0][0]

            if check_name:
                msg = f"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! ‚úâÔ∏è"

                await state.set_state(Waits.wait_for_order)
                await call.message.answer(msg)
            else:
                msg = "–ß—É–¥–æ–≤–æ! –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è! üë§"

                await call.message.answer(msg)
                await state.set_state(Waits.wait_for_name)


@dp.message(Waits.wait_for_name)
async def name(message: types.Message, state: FSMContext): 
    name = message.text
    user_id = message.from_user.id

    ifBanned = is_user_BANNED(user_id)[0][0]

    if ifBanned == 1:
        return

    else:
        if name == '/stop':
            await stop(message)
            return
        else:
            save_name(name, user_id)
            msg = "–î–æ–±—Ä–µ, —Ç–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! ‚úâÔ∏è"
            await message.answer(msg)
            await state.set_state(Waits.wait_for_order)


@dp.message(Waits.wait_for_order)
async def send_order(message: types.Message, state: FSMContext): 
    global admin_id 
    admin_id = 1071185904
    user_name = get_name(user_id)[0][0]
    if name == '/stop':
        await stop(message)
        return
    else:
        order = message.text
        msg = "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ó–∞—Ä–∞–∑ –≤–æ–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫—É. –û—á—ñ–∫—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞! ‚úÖ"
        global to_admin
        to_admin = f"‚ùóÔ∏è–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!‚ùóÔ∏è\n\nüë§ –Ü–º'—è: <a href='tg://user?id={user_id}'>{user_name}</a> üë§\nüîí ID: <code>{user_id}</code> üîí\n\n‚úâÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order} ‚úâÔ∏è"
        set_user_inactive(user_id)
        await bot.send_message(user_id, msg)
        await bot.send_message(admin_id, to_admin, reply_markup=get_button_admin())
        await state.clear()


@dp.callback_query(F.data == 'NoBtn')
async def NoBtn(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    username = call.from_user.username

    ifBanned = is_user_BANNED(user_id)[0][0]

    if ifBanned == 1:
        return
    
    else:
        if username:
            username = get_name(user_id)[0][0]

        else:
            username = call.from_user.first_name

        msg = f'–ü—Ä–∏–≤—ñ—Ç <a href="tg://user?id={user_id}">{username}</a>! ‚òÄÔ∏è\n–ß–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?'
        set_user_inactive(user_id)

        await call.message.edit_text(text=msg, reply_markup=None)

        msg = "–î–æ–±—Ä–µ! –ë—É–¥—É –Ω–∞ –≤–∞—Å —á–µ–∫–∞—Ç–∏, —è–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! ‚úÖ"
        await call.message.answer(msg)


# ===================================================================================================
# ================================ Accept & decline btn handlers ====================================
# ===================================================================================================


@dp.callback_query(F.data == "Accept")
async def accept(call: types.CallbackQuery):
    set_user_inactive(user_id)
    approved = "\n\n ‚úÖ‚úÖ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ ‚úÖ‚úÖ‚úÖ"
    await call.message.edit_text(text=to_admin+approved, reply_markup=None)
    msg = "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –ø—Ä–∏–∏ÃÜ–Ω—è—Ç–æ. –Ø –∑–∞–≤–∂–¥–∏ —Ç—É—Ç, —è–∫—â–æ –≤–∏ –∑–∞–±–∞–∂–∞—î—Ç–µ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! ‚úÖ"
    await call.bot.send_message(user_id, msg)


@dp.callback_query(F.data == "Decline")
async def accept(call: types.CallbackQuery, state: FSMContext):
    set_user_inactive(user_id)
    msg = "–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É:"
    declined = "\n\n ‚ùå‚ùå‚ùå –í—ñ–¥–º–æ–≤–ª–µ–Ω–æ ‚ùå‚ùå‚ùå"
    await call.message.edit_text(text=to_admin+declined, reply_markup=None)
    await bot.send_message(admin_id, msg)
    await state.set_state(Waits.wait_for_reason)


@dp.message(Waits.wait_for_reason)
async def order(message: types.Message, state: FSMContext): 
    reason = message.text
    if reason.lower() == "–±–µ–∑":
        msg = "‚ùå‚ùå‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞–º –±—É–ª–æ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! ‚ùå‚ùå‚ùå"
    else:
        msg = f"‚ùå‚ùå‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞–º –±—É–ª–æ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ –∑–∞ –Ω–∞—Å—É—Ç–ø–Ω–æ—é –ø—Ä–∏—á–∏–Ω–æ—é: <b>{reason}.</b> –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! ‚ùå‚ùå‚ùå"
    await bot.send_message(user_id, msg, reply_markup=None)
    await state.clear()


# ===================================================================================================
# ========================================== Ban handler ============================================
# ===================================================================================================

@dp.callback_query(F.from_user.id == 1071185904, F.data == "Ban")
async def accept(call: types.CallbackQuery):
    set_user_BANNED(user_id)
    await call.message.edit_text(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ user_id <code>{user_id}</code> –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π üö´", reply_markup=unban_button())


@dp.callback_query(F.from_user.id == 1071185904, F.data == "Unban")
async def accept(call: types.CallbackQuery):
    set_user_UNBANNED(user_id)
    await call.message.edit_text(f"‚úÖ<a href='tg://user?id={user_id}'><b> –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á üë§</b></a> –±—É–≤ —É—Å–ø—ñ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–æ–≤–∞–Ω! ‚úÖ \nuser_id - <code>{user_id}</code>", reply_markup=None)


@dp.message(F.from_user.id == 1071185904, Command("ban"))
async def ban(message: types.Message, command: CommandObject):
    if command.args:
        user_id = command.args
        if not user_id.isdigit():
            msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞! –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id ‚ùå"
        else:
            if (len(user_id) < 9 or len(user_id) > 10):
                msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ user_id! –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id ‚ùå"
            else:
                set_user_BANNED(user_id)
                msg = f"<a href='tg://user?id={user_id}'><b> –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á üë§</b></a> –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω! ‚úÖ"
    else:   
        msg = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /ban"
    await message.answer(msg)


@dp.message(F.from_user.id == 1071185904, Command("unban"))
async def unban(message: types.Message, command: CommandObject):
    if command.args:
        user_id = command.args
        if not user_id.isdigit():
            msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞! –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id ‚ùå"
        else:
            if (len(user_id) < 9 or len(user_id) > 10):
                msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ user_id! –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id ‚ùå"
            else:
                user_id = int(user_id)
                set_user_UNBANNED(user_id)
                msg = f"<a href='tg://user?id={user_id}'><b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á üë§</b></a> –±—É–≤ —Ä–∞–∑–±–ª–æ–∫–æ–≤–∞–Ω! ‚úÖ"
        await message.answer(msg)
        return
    else:
        msg = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /unban"
    await message.answer(msg)


@dp.message(F.from_user.id == 1071185904, F.text.lower() == "–±–∞–Ω–ª–∏—Å—Ç")
@dp.message(F.from_user.id == 1071185904,  Command("banlist"))
async def banlist(message: types.Message):
    user_id = message.from_user.id
    banned_users = get_banned_users()
    if banned_users:
        msg = "–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n"
        for idx, user in enumerate(banned_users, start=1):
            user_id = user[0]
            username = user[1]
            msg += f"<b>{idx}. üë§ <a href='tg://user?id={user_id}'>{username}</a> üë§</b>\n    üîí ID: <code>{user_id}</code>üîí\n\n"
    else:
        msg = "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
    await message.answer(msg)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())